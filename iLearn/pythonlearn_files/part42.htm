<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>3.8  Short-circuit evaluation of logical expressions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part57.htm">&lt; Previous</a><span> | </span><a href="../pythonlearn.html">Contents</a><span> | </span><a href="part59.htm">Next &gt;</a></p><h3 style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark96">3.8  Short-circuit evaluation of logical expressions</a><a name="bookmark115">&zwnj;</a><a name="bookmark116">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: justify;">When Python is processing a logical expression such as <span class="s3">x &gt;= 2 and (x/y) &gt; 2</span>, it evaluates the expression from left to right. Because of the definition of <span class="s3">and</span>, if <span class="s3">x </span>is less than 2, the expression <span class="s3">x &gt;= 2 </span>is <span class="s3">False </span>and so the whole expression is <span class="s3">False </span>regardless of whether <span class="s3">(x/y) &gt; 2 </span>evaluates to <span class="s3">True </span>or <span class="s3">False</span>.</p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">When Python detects that there is nothing to be gained by evaluating the rest of a logical expression, it stops its evaluation and does not do the computations in the rest of the logical expression. When the evaluation of a logical expression stops because the overall value is already known, it is called <span class="s5">short-circuiting </span>the evaluation.</p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">While this may seem like a fine point, the short-circuit behavior leads to a clever technique called the <span class="s5">guardian pattern</span>. Consider the following code sequence in the Python interpreter:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>= <span style=" color: #3FA070;">6</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">y </span>= <span style=" color: #3FA070;">2</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2 </span><span style=" color: #19167C;">True</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>= <span style=" color: #3FA070;">1</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">y </span>= <span style=" color: #3FA070;">0</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2 </span><span style=" color: #19167C;">False</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>= <span style=" color: #3FA070;">6</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">y </span>= <span style=" color: #3FA070;">0</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2</span></p><p class="s3" style="padding-left: 17pt;text-indent: -10pt;text-align: left;">Traceback (most recent call last): File <span style=" color: #3F70A0;">&quot;&lt;stdin&gt;&quot;</span>, line <span style=" color: #3FA070;">1</span>, <span style=" color: #656565;">in &lt;</span>module<span style=" color: #656565;">&gt;</span></p><p class="s24" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">ZeroDivisionError<span style=" color: #231F20;">: division by zero</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The third calculation failed because Python was evaluating <span class="s3">(x/y) </span>and <span class="s3">y </span>was zero, which causes a runtime error. But the first and the second examples did <span class="s5">not </span>fail because in the first calculation <span class="s3">y </span>was non zero and in the second one the first part of these expressions <span class="s3">x &gt;= 2 </span>evaluated to <span class="s3">False </span>so the <span class="s3">(x/y) </span>was not ever executed due to the <span class="s5">short-circuit </span>rule and there was no error.</p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">We can construct the logical expression to strategically place a <span class="s5">guard </span>evaluation just before the evaluation that might cause an error as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>= <span style=" color: #3FA070;">1</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">y </span>= <span style=" color: #3FA070;">0</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">y </span>!= <span style=" color: #3FA070;">0 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2 </span><span style=" color: #19167C;">False</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>= <span style=" color: #3FA070;">6</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">y </span>= <span style=" color: #3FA070;">0</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">y </span>!= <span style=" color: #3FA070;">0 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2 </span><span style=" color: #19167C;">False</span></p><p class="s22" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt; <span style=" color: #231F20;">x </span>&gt;= <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">(x</span>/<span style=" color: #231F20;">y) </span>&gt; <span style=" color: #3FA070;">2 </span>and <span style=" color: #231F20;">y </span>!= <span style=" color: #3FA070;">0</span></p><p class="s5" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: left;"><a name="bookmark117">3.9. DEBUGGING</a><span class="s11">                                </span><span class="p">39</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 62pt;text-indent: -10pt;text-align: left;">Traceback (most recent call last): File <span style=" color: #3F70A0;">&quot;&lt;stdin&gt;&quot;</span>, line <span style=" color: #3FA070;">1</span>, <span style=" color: #656565;">in &lt;</span>module<span style=" color: #656565;">&gt;</span></p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">ZeroDivisionError<span style=" color: #231F20;">: division by zero</span></p><p class="s22" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">&gt;&gt;&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">In the first logical expression, <span class="s3">x &gt;= 2 </span>is <span class="s3">False </span>so the evaluation stops at the <span class="s3">and</span>. In the second logical expression, <span class="s3">x &gt;= 2 </span>is <span class="s3">True </span>but <span class="s3">y != 0 </span>is <span class="s3">False </span>so we never reach <span class="s3">(x/y)</span>.</p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">In the third logical expression, the <span class="s3">y != 0 </span>is <span class="s5">after </span>the <span class="s3">(x/y) </span>calculation so the expression fails with an error.</p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">In the second expression, we say that <span class="s3">y != 0 </span>acts as a <span class="s5">guard </span>to insure that we only execute <span class="s3">(x/y) </span>if <span class="s3">y </span>is non-zero.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part57.htm">&lt; Previous</a><span> | </span><a href="../pythonlearn.html">Contents</a><span> | </span><a href="part59.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
